##Model Instance Refrence

# Model.from_db(cls, db, field_names, values)  @classmethod()

    ''''The from_db()method in Django models is a class method that is called when loading a model instance 
    from the database. It provides a way of the process of creating a model instance from the database.''''

    *** Purpose :
        * The from_db() method allows you to costumize how a model instance is created from database values.
        * It is useful when you need to perform additional processing or customization during the loading 
        process.

    *** Parameters
        * cls: The class object representing the model.
        * db: The database alias used for loading the instance.
        * field_names: A list of field names corresponding to the database columns.
        * values: A list of values retrieved from the database for the corresponding fields.

    *** Implementation
        * You can provide a custom implementation of the from_db() method in your model class.
        * The method should return an instance of the model class.
        * Inside the method, you can process the field_names and values to create the instance as per your 
        requirements.


    ********
        from django.db import models

        class MyModel(models.Model):
            field1 = models.CharField(max_length=50)
            field2 = models.IntegerField()

            @classmethod
            def from_db(cls, db, field_names, values):
                # Custom logic to create an instance
                instance = cls()
                instance.field1 = values[field_names.index('field1')]
                instance.field2 = values[field_names.index('field2')]
                return instance

    ********


    *** In addition to creating the new model, the from_db() method must set the adding and db flags in the 
    new instance’s _state attribute.

        instance._state.db = db
        
        _state.adding: Set it to False since the instance is being loaded from the database and not being 
    newly created. Assign False to _state.adding in the from_db() method.

        instance._state.adding = False


    *******After making a database query, Django will create model objects. It does this by calling the .
    from_db(…) method [Django-doc]. If the query thus returns two records with as first record {'id': 14, 
    'name': 'foo'}, and as second record {'id': 25, 'name': 'bar'}, it will call the .from_db(…) method 
    twice with SomeModel.from_db('db-alias', ['id', 'name'], [14, 'foo']), and SomeModel.from_db('db-alias',
    ['id', 'name'], [25, 'bar']). This method is thus used to convert database data in model objects.If you
    thus wish to customize how to convert data retrieved from the database, you can override the method, 
    and for example pre-process the data in the parameters, or post-process the instance that is constructed.


    ********

            from django.db.models import DEFERRED

            @classmethod
            def from_db(cls, db, field_names, values):
                # Default implementation of from_db() (subject to change and could
                # be replaced with super()).
                if len(values) != len(cls._meta.concrete_fields):
                    values = list(values)
                    values.reverse()
                    values = [
                        values.pop() if f.attname in field_names else DEFERRED
                        for f in cls._meta.concrete_fields
                    ]
                instance = cls(*values)
                instance._state.adding = False
                instance._state.db = db
                # customization to store the original field values on the instance
                instance._loaded_values = dict(zip(field_names, values))
                return instance

            def save(self, *args, **kwargs):
                # Check how the current values differ from ._loaded_values. For example,
                # prevent changing the creator_id of the model. (This example doesn't
                # support cases where 'creator_id' is deferred).
                if not self._state.adding and (
                        self.creator_id != self._loaded_values['creator_id']):
                    raise ValueError("Updating the value of creator isn't allowed")
                super().save(*args, **kwargs)
    
    ********

* Model.refresh_from_db(using=None, fields=None)

    ''''If you need to reload a model's valuesfrom the database, you can use refresh_from_db() method.
    When this method is called without arguments the following is done:

    *** All non-deferred fields of the model are updated to the values currently present in the database.
    *** Any cached relations are cleared from the reloaded instance.

    Only fields of the model are reloaded from the database. Other database-dependent values such as 
    annotations aren’t reloaded. Any @cached_property attributes aren’t cleared either.

    The reloading happens from the database the instance was loaded from, or from the default database if 
    the instance wasn’t loaded from the database. The using argument can be used to force the database used
    for reloading.
    It is possible to force the set of fields to be loaded by using the fields argument.

    *****Note that when deferred fields are accessed, the loading of the deferred field’s value happens through
    this method. Thus it is possible to customize the way deferred loading happens. The example below shows
    how one can reload all of the instance’s fields when a deferred field is reloaded:

    ********        
            
            class ExampleModel(models.Model):
                def refresh_from_db(self, using=None, fields=None, **kwargs):
                    # fields contains the name of the deferred field to be
                    # loaded.
                    if fields is not None:
                        fields = set(fields)
                        deferred_fields = self.get_deferred_fields()
                        # If any deferred field is going to be loaded
                        if fields.intersection(deferred_fields):
                            # then load all of them
                            fields = fields.union(deferred_fields)
                    super().refresh_from_db(using, fields, **kwargs)

    ********

*Model.get_deffered_fields()

    *** A helper method that returns a set containing the attribute names of all those fields that are 
    currently deferred for this model.

*__* set()
    set.intersection(set2), set.union(set2), set.difference(set2), set.symmetric_difference(set2)